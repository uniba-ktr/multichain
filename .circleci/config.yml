version: 2
defaults: &defaults
  working_directory: ~/docker-cadvisor
  machine: true

save_docker_cache: &save_docker_cache
  save_cache:
    key: compiled-{{ .Revision }}
    paths: docker-cache

restore_docker_cache: &restore_docker_cache
  restore_cache:
    key: compiled-{{ .Revision }}

load_image_from_cache: &load_image_from_cache
  run:
    name: Load docker image from cache
    command: docker load < docker-cache/base.tar

jobs:
  build_amd64:
    <<: *defaults
    steps:
      - checkout
      - run:
          name: Build image for amd64
          command: make ARCHITECTURES=amd64
      - deploy:
          name: Push image for amd64 to dockerhub
          command: make ARCHITECTURES=amd64 push
  build_i386:
    <<: *defaults
    steps:
      - checkout
      - run:
          name: Build image for i386
          command: make ARCHITECTURES=i386
      - deploy:
          name: Push image for i386 to dockerhub
          command: make ARCHITECTURES=i386 push
  build_arm32v7:
    <<: *defaults
    steps:
      - checkout
      - run:
          name: Build image for arm32v7
          command: make ARCHITECTURES=arm32v7
      - deploy:
          name: Push image for arm32v7 to dockerhub
          command: make ARCHITECTURES=arm32v7 push
  build_arm64v8:
      <<: *defaults
      steps:
        - checkout
        - run:
            name: Build image for arm64v8
            command: make ARCHITECTURES=arm64v8
        - deploy:
            name: Push image for arm64v8 to dockerhub
            command: make ARCHITECTURES=arm64v8 push
  build_ppc64le:
      <<: *defaults
      steps:
        - checkout
        - run:
            name: Build image for ppc64le
            command: make ARCHITECTURES=ppc64le
        - deploy:
            name: Push image for ppc64le to dockerhub
            command: make ARCHITECTURES=ppc64le push
  build_s390x:
      <<: *defaults
      steps:
        - checkout
        - run:
            name: Build image for s390x
            command: make ARCHITECTURES=s390x
        - deploy:
            name: Push image for s390x to dockerhub
            command: make ARCHITECTURES=s390x push
  manifest:
    <<: *defaults
    steps:
      - checkout
      - deploy:
          name: Generate multiarch manifest and push to dockerhub
          command: make manifest
#  badge:
#    <<: *defaults
#    steps:
#      - run:
#          name: Call microbadger's webhook
#          command: curl -X POST https://hooks.microbadger.com/images/unibaktr/cadvisor/Fip_9kcTN5C9Fp0aDrXhhOlpX0Y=


tag_filter: &tag_filter
  filters:
    tags:
      only: /.*/

workflows:
  version: 2
  compile-build-and-deploy:
    jobs:
      - build_amd64:
          <<: *tag_filter
      - build_i386:
          <<: *tag_filter
      - build_arm32v7:
          <<: *tag_filter
      - build_arm64v8:
          <<: *tag_filter
      - build_ppc64le:
          <<: *tag_filter
      - build_s390x:
          <<: *tag_filter
      - manifest:
          requires:
            - build_amd64
            - build_i386
            - build_arm32v7
            - build_arm64v8
            - build_ppc64le
            - build_s390x
          <<: *tag_filter
      - badge:
          requires:
            - manifest
          <<: *tag_filter
